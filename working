<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image to PDF Converter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"></script>
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* Container Styles */
        .container {
            max-width: 1200px;
            width: 100%;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin: 0 auto;
        }

        /* Header Styles */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid #eee;
        }

        .header h1 {
            font-size: 24px;
            color: #333;
        }

        /* Drop Zone Styles */
        .drop-zone {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            margin-bottom: 24px;
            transition: all 0.3s ease;
            background: #fafafa;
            cursor: pointer;
        }

        .drop-zone.drag-over {
            border-color: #2196F3;
            background: #E3F2FD;
        }

        .drop-zone p {
            color: #666;
            margin: 8px 0;
        }

        .drop-zone .icon {
            font-size: 48px;
            color: #999;
            margin-bottom: 16px;
        }

        /* Preview Grid */
        .preview-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        .preview-item {
            position: relative;
            aspect-ratio: 1;
            border-radius: 8px;
            overflow: hidden;
        }

        .preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .preview-item .overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .preview-item:hover .overlay {
            opacity: 1;
        }

        /* Button Styles */
        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #2196F3;
            color: white;
        }

        .btn-primary:hover {
            background: #1976D2;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid #ccc;
            color: #666;
        }

        .btn-outline:hover {
            background: #f5f5f5;
        }

        .btn-icon {
            padding: 8px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
        }

        .btn-icon:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        /* Settings Panel */
        .settings-panel {
            background: white;
            padding: 24px;
            border-radius: 12px;
            margin-top: 24px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
        }

        .form-control:focus {
            outline: none;
            border-color: #2196F3;
        }

        /* Actions Bar */
        .actions-bar {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 24px;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .container {
                padding: 16px;
            }

            .header {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }

            .preview-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }

            .actions-bar {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }
        }

        /* Alert Styles */
        .alert {
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 16px;
            background: #E3F2FD;
            color: #1976D2;
            display: none;
        }

        /* Progress Bar */
        .progress-bar {
            width: 100%;
            height: 4px;
            background: #eee;
            border-radius: 2px;
            margin-top: 8px;
            overflow: hidden;
            display: none;
        }

        .progress-bar-fill {
            height: 100%;
            background: #2196F3;
            width: 0%;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Image to PDF Converter</h1>
            <button class="btn btn-outline" onclick="toggleSettings()">
                Settings
            </button>
        </div>

        <div class="alert" id="alert"></div>

        <div class="drop-zone" id="dropZone">
            <div class="icon">üìÅ</div>
            <p>Drag and drop images here</p>
            <p>or</p>
            <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                Browse Files
            </button>
            <input type="file" id="fileInput" multiple accept="image/*" style="display: none">
        </div>

        <div class="preview-grid" id="previewGrid"></div>

        <div class="progress-bar" id="progressBar">
            <div class="progress-bar-fill" id="progressBarFill"></div>
        </div>

        <div class="settings-panel" id="settingsPanel" style="display: none;">
            <h3 style="margin-bottom: 16px;">PDF Settings</h3>
            <div class="form-group">
                <label for="pageSize">Page Size</label>
                <select id="pageSize" class="form-control">
                    <option value="A4">A4</option>
                    <option value="Letter">Letter</option>
                    <option value="Legal">Legal</option>
                </select>
            </div>
            <div class="form-group">
                <label for="orientation">Orientation</label>
                <select id="orientation" class="form-control">
                    <option value="portrait">Portrait</option>
                    <option value="landscape">Landscape</option>
                </select>
            </div>
            <div class="form-group">
                <label for="quality">Image Quality</label>
                <input type="range" id="quality" class="form-control" min="0.1" max="1" step="0.1" value="0.8">
                <span id="qualityValue">80%</span>
            </div>
        </div>

        <div class="actions-bar">
            <button class="btn btn-outline" onclick="clearAll()">Clear All</button>
            <button class="btn btn-primary" onclick="generatePDF()">Generate PDF</button>
        </div>
    </div>

    <script>
        let images = [];
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const previewGrid = document.getElementById('previewGrid');
        const progressBar = document.getElementById('progressBar');
        const progressBarFill = document.getElementById('progressBarFill');
        const alert = document.getElementById('alert');
        const qualityInput = document.getElementById('quality');
        const qualityValue = document.getElementById('qualityValue');

        // Update quality value display
        qualityInput.addEventListener('input', (e) => {
            qualityValue.textContent = `${Math.round(e.target.value * 100)}%`;
        });

        // Drag and drop handlers
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('drag-over');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('drag-over');
            handleFiles(e.dataTransfer.files);
        });

        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function handleFiles(files) {
            const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
            
            imageFiles.forEach(file => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const image = {
                        id: Math.random().toString(36).substr(2, 9),
                        data: e.target.result,
                        file: file
                    };
                    images.push(image);
                    updatePreviewGrid();
                };
                reader.readAsDataURL(file);
            });
        }

        function updatePreviewGrid() {
            previewGrid.innerHTML = images.map((image, index) => `
                <div class="preview-item">
                    <img src="${image.data}" alt="Preview ${index + 1}">
                    <div class="overlay">
                        ${index > 0 ? `
                            <button class="btn-icon" onclick="moveImage(${index}, 'up')">‚Üë</button>
                        ` : ''}
                        ${index < images.length - 1 ? `
                            <button class="btn-icon" onclick="moveImage(${index}, 'down')">‚Üì</button>
                        ` : ''}
                        <button class="btn-icon" onclick="removeImage(${index})">√ó</button>
                    </div>
                </div>
            `).join('');
        }

        function moveImage(index, direction) {
            const newIndex = direction === 'up' ? index - 1 : index + 1;
            if (newIndex >= 0 && newIndex < images.length) {
                [images[index], images[newIndex]] = [images[newIndex], images[index]];
                updatePreviewGrid();
            }
        }

        function removeImage(index) {
            images.splice(index, 1);
            updatePreviewGrid();
        }

        function clearAll() {
            images = [];
            updatePreviewGrid();
        }

        function toggleSettings() {
            const settingsPanel = document.getElementById('settingsPanel');
            settingsPanel.style.display = settingsPanel.style.display === 'none' ? 'block' : 'none';
        }

        function showAlert(message, type = 'info') {
            alert.style.display = 'block';
            alert.textContent = message;
            alert.style.background = type === 'error' ? '#FFEBEE' : '#E3F2FD';
            alert.style.color = type === 'error' ? '#C62828' : '#1976D2';
            setTimeout(() => {
                alert.style.display = 'none';
            }, 3000);
        }

        async function generatePDF() {
            if (images.length === 0) {
                showAlert('Please add at least one image', 'error');
                return;
            }

            try {
                progressBar.style.display = 'block';
                progressBarFill.style.width = '0%';

                const { PDFDocument } = PDFLib;
                const pdfDoc = await PDFDocument.create();

                const pageSize = document.getElementById('pageSize').value;
                const orientation = document.getElementById('orientation').value;
                const quality = parseFloat(document.getElementById('quality').value);

                for (let i = 0; i < images.length; i++) {
                    const image = images[i];
                    const img = new Image();
                    img.src = image.data;
                    await new Promise((resolve) => {
                        img.onload = resolve;
                    });

                    // Create a canvas to resize the image
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = img.width * quality;
                    canvas.height = img.height * quality;
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                    // Convert canvas to bytes
                    const imageBytes = await fetch(canvas.toDataURL('image/jpeg', quality)).then(res => res.arrayBuffer());

                    // Embed the image
                    const embeddedImage = image.data.startsWith('data:image/jpeg') 
                        ? await pdfDoc.embedJpg(imageBytes)
                        : await pdfDoc.embedPng(imageBytes);

                    // Add page
                    const page = pdfDoc.addPage();
                    const { width, height } = page.getSize();
                    const aspectRatio = embeddedImage.width / embeddedImage.height;

                    // Calculate dimensions to fit the page
                    let imageWidth = width - 40; // 20px margin on each side
                    let imageHeight = imageWidth / aspectRatio;

                    if (imageHeight > height - 40) {
                        imageHeight = height - 40;
                        imageWidth = imageHeight * aspectRatio;
                    }

                    const x = (width - imageWidth) / 2;
                    const y = (height - imageHeight) / 2;

                    page.drawImage(embeddedImage, {
                        x,
                        y,
                        width: imageWidth,
                        height: imageHeight,
                    });

                    // Update progress bar
                    progressBarFill.style.width = `${((i + 1) / images.length) * 100}%`;
                }

                // Save the PDF
                const pdfBytes = await pdfDoc.save();
                const blob = new Blob([pdfBytes], { type: 'application/pdf' });
                const url = URL.createObjectURL(blob);

                // Create download link
                const link = document.createElement('a');
                link.href = url;
                link.download = 'converted-images.pdf';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                showAlert('PDF generated successfully!');
            } catch (error) {
                console.error('Error generating PDF:', error);
                showAlert('Error generating PDF. Please try again.', 'error');
            } finally {
                progressBar.style.display = 'none';
            }
        }

        // Initialize with some helper text if no images
        updatePreviewGrid();
        if (images.length === 0) {
            showAlert('Add images to get started!');
        }
    </script>
</body>
</html>
